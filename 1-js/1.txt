[자바스크립트]
// 배열(객체), 객체, 함수(객체) : 주소, 메모리 참조
let a = [1 , 2 , 3] // a주소 = 서울시 강남구 역삼동 123-1

* Shallow Copy : 얕은복사  
#	let b = a // b주소 = 서울시 강남구 역삼동 123-1
#	b.push(4) // 같은 메모리를 참조하기 때문에 b에 4가 추가되면 a에도 똑같이 4가 추가된다.
#	console.log(b) // [1, 2, 3, 4]
#	console.log(a) // [1, 2, 3, 4]


# 변전사(Object.assign전)
# parse : Javascript를 변형
# stringify : 문자열로 바꿔준다.

* Deep Copy : 깊은 복사
let b = JSON.parse(JSON.stringify(a)) // b주소 = 서울시 강남구 역삼동 123-2

// 만약에!! b를 1,2,3이 가진 값으로 다른 메모리의 주소를 참조해서 a와 다르게 처리하고싶을 떄는?
// Object.assign으로 새로운 주소를 만들어서 거기에 a를 넣어주면 b와는 다른 주소가 된다.
- 1. 첫번째 방법
let b = Object.assign([], a) // b주소 = 서울시 강남구 역삼동 123-2

- 2. 두번째 방법
const b = [...a] // b주소 = 서울시 강남구 역삼동 123-2
b.push(4) // 같은 메모리를 참조하기 때문에 b에 4가 추가되면 a에도 똑같이 4가 추가된다, 주소가 그대로 인한 바뀌는 것이 아니다.

console.log(b) // [1, 2, 3, 4]
console.log(a) // [1, 2, 3]


** 리액트를 하기 전에 깊은 복사(Deep Copy 잘활용할수 있어야 한다!!)

// 수, 문자열, 불리언, null, undefined : 값 참조
* 상수(const)이기 때문에 에러가 난다.
const c = 1
c = 2

* 객체도 마찬가지다.
const c = { x: 1, y: 2 } // c주소 = 서울시 강남구 역삼동 123-1

* Shallow Copy : 얕은복사
const d = c // d에다가 c를 넣고 밑에서 c.x를 3으로 바꾸면 d도 같이 바뀐다(같은 주소를 참조하기 때문!!)

* Deep Copy : 깊은복사
const d = JSON.parse(JSON.stringify(c))
# 객체 깊은 복사
const d = Object.assign({}, c)
const d = [...c] // d주소 = 서울시 강남구 역삼동 123-2
c.x = 3
# Deep Copy를 했기 때문에 c만 바뀐다.
console.log(c) // { x: 3, y: 2 }
console.log(d) // { x: 1, y: 2 }
# Shallow Copy를 했을때는 당연히 둘다 바뀐다.
console.log(c) // { x: 3, y: 2 }
console.log(d) // { x: 3, y: 2 }

- 상수의 형태
const FIXED_VALUE = 1 // 얘는 무조건 1이어야 한다.
* 주소참조는 무조건 const(상수)로 선언을한다! 왜? 주소가 바뀌면 안되기 때문!!!

// Q. 둘의 차이는?
