[ReactHooks]

1. useContext

- 리액트는 컴포넌트들로 이루어져 있다.
- 최상위 App컴포넌트에서 시작하여 트리형태로 뻗어나간다.
- 리액트에서의 일반적인 데이터 흐름은 위에서 아래로 부모컴포넌트에서 자식컴포넌트로 props를 통해 전달이 된다.
- props로 데이터를 전달할때는 부모컴포넌트가 자식컴포넌트에게 일일이 props를 넣어서 단계별로 전달을 해줘야한다.(App(부모) => test(자식)컴포넌트로)
- 그럴경우 코드가 복잡해지고 일일이 컴포넌트들을 찾아다녀야 하는 불편함이 있다.
- 이러한 문제점을 해결하는 것이 Context API이다.
- context는 앱안에서 전역적으로 사용하는 데이터들을 여러컴포넌트들끼리 쉽게 공유할수 있는 방법을 제공한다.
- context를 사용하면 일일이 props로 전달해주지 않아도 해당 데이터를 갖고 있는 상위 컴포넌트가 하위 컴포넌트가 필요한 데이터를 트리안에 어디에 위치해 있던 전달해줄 수 있다.

# prop Drilling
- React 애플리케이션에서 상태나 메서드를 하위 컴포넌트로 전달하는 프로세스를 가리킵니다. 
- 이는 컴포넌트 계층 구조에서 상위 컴포넌트에서 하위 컴포넌트로 데이터를 전달하는 것을 의미합니다. 
- 이는 컴포넌트 간의 데이터 흐름을 가능하게 하며, 일반적으로 상태 또는 메서드를 props를 통해 전달하여 이루어집니다.
- 그러나 이러한 방식은 컴포넌트 계층이 깊어지면 prop drilling이 복잡해질 수 있으며, 
- 이를 해결하기 위해 "Context API"나 상태 관리 라이브러리인 "Redux" 등을 사용할 수 있습니다.

# Context는 꼭 필요할때만 !!
- context를 사용하면 컴포넌트를 재사용하기 어려워 질수 있다.
- context의 주된 목적은 다양한 컴포넌트들에게 전역적인 데이터를 전달하기 위함이다.
- prop Drilling을 피하기 위한 목적이라면 Component Composition("컴포넌트 합성")을 고려해야 한다.

~ Component Composition("컴포넌트 합성") 이란, 컴포넌트 조합 (Component Composition)은 
  React 애플리케이션을 작성하는 데 사용되는 디자인 패턴 중 하나입니다. 
	이 패턴은 각각의 작은 컴포넌트를 조합하여 더 크고 복잡한 컴포넌트를 구성하는 방법을 강조합니다. 
	컴포넌트 조합은 코드의 재사용성을 높이고 유지보수를 쉽게 만들며, 응집성과 분리 가능성을 통해 코드의 가독성을 향상시킬 수 있습니다.

	$ context흐름
		1. App.js에서 context를 불러와서 핌요한 정보를 모든 하위컴포넌트들에게 공지한다.(ThemeContext.provider로 감싼 정보를)
		2. 하위 컴포넌트들은 그 필요한 정보를 사용하기 위해 useContext로 정보를 받을 준비한다.(const{ isDark, setIsDark... } = useContext(ThemeContext), 잊지말고 import하기)
		3. 그러면 props없이 정보(필요한 데이터)를 받아올수 있다.

